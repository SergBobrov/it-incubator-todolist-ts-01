{"version":3,"sources":["AddItemForm.tsx","EditAbleSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","addItem","useState","title","setTitle","error","setError","OnAddTaskClick","trim","TextField","variant","size","value","onKeyPress","e","charCode","onChange","currentTarget","label","helperText","Button","onClick","color","disableElevation","AddBox","EditAbleSpan","editMode","seteditMode","onBlur","changeValue","autoFocus","onDoubleClick","TodoList","tasks","map","t","key","id","className","isDone","Checkbox","checked","changeStatus","changeTaskTitle","IconButton","removeTask","Delete","changeToDolistTitle","removeToDoList","setTask","style","listStyle","paddingLeft","filter","changeFilter","App","todoListId1","v1","todoListId2","toDolists","settoDolist","setTasks","taskID","todoListID","task","find","addTask","toDolistTasks","removeTasks","taskId","toDolistTask","toDoListID","toDolist","todolistID","toDolistID","todolist","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","padding","newTodoListID","newTodoList","container","spacing","tasksForTodoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.63854e0c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n\r\nfunction AddItemForm(props: AddItemFormType) {\r\n\r\n    const addItem = props.addItem;\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHendler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    const OnAddTaskClick = () => {\r\n        if (title.trim()) {\r\n            addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required!\");\r\n        }\r\n    }\r\n\r\n    const onKeyPressHendler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            OnAddTaskClick()\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                size={\"small\"}\r\n                value={title}\r\n                onKeyPress={onKeyPressHendler}\r\n                onChange={onChangeHendler}\r\n                label={\"Title\"}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n\r\n            <Button onClick={OnAddTaskClick} size={\"medium\"}  color=\"primary\" disableElevation>\r\n                <AddBox/>\r\n            </Button>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AddItemForm;\r\n\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditAbleSpanType = {\r\n    value: string\r\n    changeValue: (value: string) => void\r\n}\r\n\r\nfunction EditAbleSpan(props: EditAbleSpanType) {\r\n    let [editMode, seteditMode] = useState<boolean>(false);\r\n    let [title, setTitle] = useState<string>(props.value)\r\n\r\n    const activateEditMode = () => {\r\n        seteditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        seteditMode(false)\r\n        props.changeValue(title)\r\n    }\r\n\r\n    const onChangeHendler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        editMode\r\n            ? <input value={title}\r\n                     onBlur={deActivateEditMode}\r\n                     autoFocus={true}\r\n                     onChange={onChangeHendler}\r\n            />\r\n\r\n\r\n            : <span onDoubleClick={activateEditMode}> {props.value}</span>\r\n    )\r\n}\r\n\r\nexport default EditAbleSpan;","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditAbleSpan from \"./EditAbleSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {CheckBox, Delete} from \"@material-ui/icons\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoListID: string) => void\r\n    changeFilter: (value: FilterValuesType, toDoListID: string) => void\r\n    setTask: (t: string, todoListID: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    removeToDoList: (s: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n    changeToDolistTitle: (toDolistID: string, title: string) => void\r\n\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const tasks = props.tasks.map(t => {\r\n            const removeTask = () => props.removeTask(t.id, props.id)\r\n\r\n            const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n                props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n            };\r\n\r\n            const changeTaskTitle = (value: string) => {\r\n                props.changeTaskTitle(t.id, value, props.id);\r\n            };\r\n\r\n            return (\r\n                <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                    <Checkbox\r\n                        color={\"primary\"}\r\n                        checked={t.isDone}\r\n                        onChange={changeStatus}\r\n                    />\r\n                    <EditAbleSpan value={t.title} changeValue={changeTaskTitle}/>\r\n\r\n                    <IconButton onClick={removeTask\r\n                    }> <Delete/></IconButton>\r\n                </li>);\r\n        }\r\n    )\r\n\r\n    const addTask = (title: string) => {\r\n        props.setTask(title, props.id);\r\n    };\r\n\r\n    const onAllClickHendler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    };\r\n\r\n    const onActiveClickHendler = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    };\r\n\r\n    const onConpletedClickHendler = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    };\r\n\r\n    const deleteTask = () => {\r\n        props.removeToDoList(props.id);\r\n    };\r\n\r\n    const changeToDolistTitle = (title: string) => {\r\n        props.changeToDolistTitle(props.id, title)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditAbleSpan value={props.title} changeValue={changeToDolistTitle}></EditAbleSpan>\r\n                <IconButton onClick={deleteTask}><Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <ul style={{listStyle: \"none\", paddingLeft: \"0\"}\r\n            }>\r\n                {tasks}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"all\" ? \"primary\" : \"default\"}\r\n                    variant={\"contained\"}\r\n                    onClick={onAllClickHendler}>All\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"active\" ? \"primary\" : \"default\"}\r\n                    variant={\"contained\"}\r\n                    onClick={onActiveClickHendler}>Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    color={props.filter === \"completed\" ? \"primary\" : \"default\"}\r\n                    variant={\"contained\"}\r\n                    onClick={onConpletedClickHendler}>Completed\r\n                </Button>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Container, Grid, IconButton, Paper, Toolbar} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType;\r\n}\r\n\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    let todoListId1 = v1();\r\n    let todoListId2 = v1();\r\n\r\n    let [toDolists, settoDolist] = useState<Array<ToDoListType>>([\r\n            {id: todoListId1, title: \"What to do\", filter: \"all\"},\r\n            {id: todoListId2, title: \"What to learn\", filter: \"all\"}\r\n        ]\r\n    )\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: false},\r\n            {id: v1(), title: \"React\", isDone: true},\r\n            {id: v1(), title: \"GraphQL\", isDone: true},\r\n            {id: v1(), title: \"Rest API\", isDone: true}\r\n        ],\r\n        [todoListId2]: [{id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"English\", isDone: false},\r\n            {id: v1(), title: \"French\", isDone: true},\r\n            {id: v1(), title: \"Russian\", isDone: true},\r\n            {id: v1(), title: \"Spanish\", isDone: true},\r\n        ]\r\n    })\r\n\r\n    function changeStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        let toDolistTasks = tasks[todoListID]\r\n        let task = toDolistTasks.find(t => t.id === taskID);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        let toDolistTasks = tasks[todoListID]\r\n        let task = {id: v1(), title: title, isDone: false}\r\n        tasks[todoListID] = [task, ...toDolistTasks]\r\n        setTasks({...tasks});\r\n    }\r\n\r\n\r\n    function removeTasks(taskId: string, todoListID: string) {\r\n        let toDolistTask = tasks[todoListID]\r\n\r\n        tasks[todoListID] = toDolistTask.filter(t => t.id !== taskId);\r\n        setTasks({...tasks});\r\n\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1();\r\n        const newTodoList: ToDoListType = {\r\n            id: newTodoListID,\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        settoDolist([...toDolists, newTodoList])\r\n        setTasks({...tasks, [newTodoListID]: []})\r\n    }\r\n\r\n\r\n    function changeFilter(value: FilterValuesType, toDoListID: string) {\r\n        let toDolist = toDolists.find(t => t.id === toDoListID);\r\n        if (toDolist) {\r\n            toDolist.filter = value;\r\n            settoDolist([...toDolists])\r\n        }\r\n    }\r\n\r\n    function removeToDoList(todolistID: string) {\r\n        settoDolist(toDolists.filter(t => t.id !== todolistID));\r\n        delete tasks[todolistID];\r\n    }\r\n\r\n\r\n    const changeTaskTitle = (taskID: string, title: string, todoListID: string) => {\r\n        const todolistTask = tasks[todoListID]\r\n        const task = todolistTask.find(task => task.id === taskID)\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeToDolistTitle(toDolistID: string, title: string) {\r\n        const todolist = toDolists.find(t => t.id === toDolistID);\r\n        if (todolist) {\r\n            todolist.title = title\r\n            settoDolist([...toDolists]);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className={\"App\"}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed >\r\n\r\n                <Grid style={{padding: \"25px\"}}><AddItemForm addItem={addTodoList}/></Grid>\r\n\r\n                <Grid container spacing={5}>\r\n                    {\r\n                        toDolists.map(t => {\r\n\r\n                            let tasksForTodoList = tasks[t.id];\r\n                            if (t.filter === \"active\") {\r\n                                tasksForTodoList = tasks[t.id].filter(t => !t.isDone)\r\n                            }\r\n                            if (t.filter === \"completed\") {\r\n                                tasksForTodoList = tasks[t.id].filter(t => t.isDone)\r\n                            }\r\n\r\n                            return (\r\n                                <Grid key={t.id} item>\r\n                                    <Paper style={{padding: \"25px\"}}>\r\n                                        <TodoList\r\n                                            changeToDolistTitle={changeToDolistTitle}\r\n                                            removeToDoList={removeToDoList}\r\n                                            key={t.id}\r\n                                            id={t.id}\r\n                                            title={t.title}\r\n                                            tasks={tasksForTodoList}\r\n                                            removeTask={removeTasks}\r\n                                            changeFilter={changeFilter}\r\n                                            setTask={addTask}\r\n                                            changeStatus={changeStatus}\r\n                                            filter={t.filter}\r\n                                            changeTaskTitle={changeTaskTitle}\r\n                                        />\r\n                                    </Paper>\r\n                                </Grid>\r\n\r\n                            );\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}